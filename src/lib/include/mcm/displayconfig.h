/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p displayconfig -i types.h ../../interfaces/org.gnome.Mutter.DisplayConfig.xml
 *
 * qdbusxml2cpp is Copyright (C) 2023 The Qt Company Ltd and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DISPLAYCONFIG_H
#define DISPLAYCONFIG_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "types.h"

/*
 * Proxy class for interface org.gnome.Mutter.DisplayConfig
 */
class OrgGnomeMutterDisplayConfigInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.gnome.Mutter.DisplayConfig"; }

public:
    OrgGnomeMutterDisplayConfigInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgGnomeMutterDisplayConfigInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ApplyMonitorsConfig(uint serial, uint method, const QList<ApplyMonitorsConfigLogicalMonitor> &logical_monitors, const QHash<QString,QDBusVariant> &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(serial) << QVariant::fromValue(method) << QVariant::fromValue(logical_monitors) << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QStringLiteral("ApplyMonitorsConfig"), argumentList);
    }

    inline QDBusPendingReply<uint, QList<GetCurrentStateMonitor> , QList<GetCurrentStateLogicalMonitor> , QHash<QString,QDBusVariant> > GetCurrentState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetCurrentState"), argumentList);
    }
    inline QDBusReply<uint> GetCurrentState(QList<GetCurrentStateMonitor> &logical_monitors, QList<GetCurrentStateLogicalMonitor> &logical_monitors_, QHash<QString,QDBusVariant> &properties)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetCurrentState"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().size() == 4) {
            logical_monitors = qdbus_cast<QList<GetCurrentStateMonitor> >(reply.arguments().at(1));
            logical_monitors_ = qdbus_cast<QList<GetCurrentStateLogicalMonitor> >(reply.arguments().at(2));
            properties = qdbus_cast<QHash<QString,QDBusVariant> >(reply.arguments().at(3));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace gnome {
    namespace Mutter {
      using DisplayConfig = ::OrgGnomeMutterDisplayConfigInterface;
    }
  }
}
#endif
